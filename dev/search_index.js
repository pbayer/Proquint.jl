var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Proquint","category":"page"},{"location":"#Proquint","page":"Home","title":"Proquint","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Proquint]","category":"page"},{"location":"#Proquint.Proquint","page":"Home","title":"Proquint.Proquint","text":"Proquints: Identifiers that are Readable, Spellable, and Pronounceable\n\nThis is a Julia implementation of Wilkerson's proquints  described in his article http://arXiv.org/html/0901.4016.\n\nIn short 16 bits get represented in a \"proquint\" as alternating  consonants and vowels.\n\nFour-bits as a consonant:\n\n0 1 2 3 4 5 6 7 8 9 A B C D E F\nb d f g h j k l m n p r s t v z\n\nTwo-bits as a vowel:\n\n0 1 2 3\na i o u\n\nWhole 16-bit word, where \"con\" = consonant, \"vo\" = vowel:\n\n 0 1 2 3 4 5 6 7 8 9 A B C D E F\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n|con    |vo |con    |vo |con    |\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\nProquints are separated by dashes -.\n\nShort Form (extension)\n\nThe short form does not encode leading zeros of 16-bit words and  if an entire word is 0, it gets encoded as \"x\".\n\nExample\n\nThe UInt32 0x0a484904 is in bit representation:\n\n0000 10 1001 00 1000  0100 10 0100 00 0100\n  b   o   n   a   m  -  h   o   h   a   h\n      o   n   a   m  -  h   o   h   a   h   # short version\n\nThe IP address 127.0.0.1 is a 0x7f000001 UInt32:\n\n0111 11 1100 00 0000  0000 00 0000 00 0001\n  l   u   s   a   b  -  b   a   b   a   d\n  l   u   s   a   b  -                  d   # short version\n\nProquints are unambiguous and can be generated from integers and converted back to them:\n\njulia> using Proquint\n\njulia> uint2quint(0x7f000001)\n\"lusab-babad\"\n\njulia> uint2quint(0x7f000001, short=true) # this gives the short version\n\"lusab-d\"\n\njulia> quint2uint(\"lusab-babad\", UInt32)\n0x7f000001\n\njulia> quint2uint(\"lusab-d\", UInt32)\n0x7f000001\n\n\n\n\n\n","category":"module"},{"location":"#Proquint.version","page":"Home","title":"Proquint.version","text":"Gives the package version\n\n\n\n\n\n","category":"constant"},{"location":"#Proquint.quint2uint-Union{Tuple{String}, Tuple{T}, Tuple{String,Type{T}}} where T<:Unsigned","page":"Home","title":"Proquint.quint2uint","text":"quint2uint(qs::String, U::Type{T}=UInt) where T<:Unsigned\n\nConvert a proquint string identifier qs into a corresponding integer value.\n\nArguments\n\nU: unsigned integer type e.g. UInt16, UInt32, UInt64 or UInt128 \n\nExample\n\njulia> quint2uint(\"lusab-babad\", UInt32)\n0x7f000001\n\njulia> quint2uint(\"lusab-d\", UInt32)\n0x7f000001\n\n\n\n\n\n","category":"method"},{"location":"#Proquint.uint2quint-Union{Tuple{T}, Tuple{T,Any}} where T<:Integer","page":"Home","title":"Proquint.uint2quint","text":"uint2quint(x::T, sep=\"-\"; short=false) where T<:Integer\n\nConvert an integer value into a corresponding proquint string identifier.\n\nArguments\n\nx: an integer argument,\nsep=\"-\": a separator string,\nshort=false: determines whether a short string should be created.\n\nExample\n\njulia> uint2quint(0x7f000001)\n\"lusab-babad\"\n\njulia> uint2quint(0x7f000001, short=true)\n\"lusab-d\"\n\n\n\n\n\n","category":"method"}]
}
